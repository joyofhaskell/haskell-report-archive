%
% $Header: /tmp_mnt/local.fp/haskell/report/report-1.0/RCS/lexemes.verb,v 1.0 90/03/28 14:59:49 partain Exp $
%
\section{Lexical Structure}\index{lexical structure}
\label{lexical-structure}

In this section, 
we describe the low-level lexical structure of {\sc Haskell}.
Most of the details may be skipped in a first reading of
the report.

\subsection{Notational Conventions}

These notational conventions are used for presenting syntax:

\[\ba{cl}
"[pattern]"		& \tr{optional} \\
"\{pattern\}"		& \tr{zero or more repetitions} \\
"(pattern)"		& \tr{grouping} \\
"pat_1 | pat_2"		& \tr{choice} \\
"pat_{\{pat'\}}"	& \tr{difference---elements generated by "pat"} \\
			& \tr{except those generated by "pat'"} \\
"@fibonacci@"		& \tr{terminal syntax in typewriter font}
\ea\]

Because the syntax in this section describes {\em lexical} syntax, all
whitespace is expressed explicitly; there is no
implicit space between juxtaposed symbols.  BNF-like syntax is used
throughout, with productions having the form:
@@@
nonterm		-> alt_1 | alt_2 | ... | alt_n
@@@

Care must be taken in distinguishing meta-logical syntax such as "|"
and "[...]" from concrete terminal syntax (given in typewriter font)
such as @|@ and @[...]@, although usually the context makes the
distinction clear.

{\sc Haskell} source programs are currently biased toward the ASCII\index{ASCII}
character set, although future {\sc Haskell} standardisation efforts will
likely address broader character standards.

\subsection{Lexical Program Structure}
\label{lexemes}
\label{whitespace}

@@@
program		-> \{ lexeme | whitespace \}
lexeme          -> varid | conid | varop | conop | literal | special | reservedop | reservedid
literal		-> integer | float | char | string
special		-> @(@ | @)@ | @,@ | @;@ | @[@ | @]@ | @_@ | @{@ | @}@

whitespace	-> whitestuff \{whitestuff\}
whitestuff -> newline | space | tab | vertab | formfeed | comment | ncomment
newline		-> \tr{a newline (system dependent)}
space		-> \tr{a space}
tab		-> \tr{a horizontal tab}
vertab		-> \tr{a vertical tab}
formfeed	-> \tr{a form feed}
comment		-> @--@ \{any\} newline
ncomment	-> @{-@ \{whitespace | any_{\{@{-@ | @-}@\}} \} @-}@
any		-> graphic | space | tab
graphic		-> large | small | digit
 | @!@ | @"@ | @#@ | @$@ | @%@ | @&@  | \fwq | @(@ | @)@ | @*@ | @+@
 | @,@ | @-@ | @.@ | @/@ | @:@ | @;@  | @<@  | @=@ | @>@ | @?@ | @@
 | @[@ | @\@ | @]@ | @^@ | @_@ | \bkq | @{@  | @|@ | @}@ | @~@

small		-> @a@ | @b@ | ... | @z@
large		-> @A@ | @B@ | ... | @Z@
digit		-> @0@ | @1@ | ... | @9@
@@@

Characters not in the category "graphic" or "whitestuff" are not valid
in {\sc Haskell} programs and should result in a lexing error.

Comments\index{comments} are valid "whitespace".  Ordinary
comments begin with two consecutive dashes (@--@) and extend to the
following newline.  Nested comments are enclosed by @{-@ and @-}@
and can be between any two lexemes.  Thus any contiguous
portion of {\sc Haskell} program text may be turned into a comment,
whether or not that portion contains comments within it.  Nested
comments also provide a convenient method for implementing
annotations.

\subsection{Identifiers and Operators}\index{identifiers}\index{operators}
\label{ids}

@@@
avarid	-> (small \{small | large | digit | \fwq | @_@\})_{\{reservedid\}}
varid		-> avarid | @(@avarop@)@
aconid		-> large \{small | large | digit | \fwq | @_@\} 
conid		-> aconid | @(@aconop@)@
reservedid -> @case@ | @class@ | @data@ | @default@ | @deriving@ | @else@ | @hiding@
	| @if@ | @import@ | @infix@ | @infixl@ | @infixr@ | @instance@ | @interface@
	| @module@ | @of@ | @renaming@ | @then@ | @to@ | @type@ | @where@
@@@
An identifier consists of a letter followed by zero or more letters,
digits, underscores, and acute accents.  Identifiers are lexically
distinguished into two classes: those that begin with a small letter
(variable identifiers) and those that begin with a capital
(constructor identifiers).  Identifiers are case sensitive: @name@,
@naMe@, and @Name@ are three distinct identifiers (the first two are
variable identifiers, the last is a constructor identifier).

@@@
avarop		-> ( symbol \{symbol | @:@\} )_{\{reservedop\}} | @-@
varop		-> avarop | \bkqB{avarid}\bkqA
aconop		-> (@:@ \{symbol | @:@\})_{\{reservedop\}}
conop		-> aconop | \bkqB{aconid}\bkqA
symbol		-> @!@ | @#@ | @$@ | @%@ | @&@ | @*@ | @+@ | @.@ | @/@ | @<@ | @=@ | @>@ | @?@ | @@ | @\@ | @^@ | @|@ | @~@ 
reservedop	-> @..@ | @::@ | @=>@ | @=@ | @@ | @\@ | @|@ | @~@
@@@
An operator is either symbolic or alphanumeric.  Symbolic operators
are formed from one or more symbols, as defined above, and are
lexically distinguished into two classes: those that start with a
colon (constructors) and those that do not (functions).

Alphanumeric operators are formed by enclosing an identifier between
grave accents (backquote).  Any variable or constructor may be used as
an operator in this way.  If "fun" is an identifier (either variable
or constructor), then an expression of the form "fun x y" is
equivalent to "x \bkqB{fun}\bkqA y".  If no fixity\index{fixity}
declaration is given for "\bkqB{fun}\bkqA" then it defaults
\index{fixity!default} to infix with highest precedence and left associativity
(see Section~\ref{fixity}).

Similarly, any symbolic operator may be used as a (curried) variable
or constructor by enclosing it in parentheses.  If "op" is an infix
operator, then an expression or pattern of the form \mbox{"x op y"} is
equivalent to {"@(@op@)@ x y"}.

No spaces are permitted in names such as "\bkqB{fun}\bkqA" and
"@(@op@)@".

All operators are infix, although there
is a special syntax for prefix negation\index{negation} (see
Section~\ref{operators}).  All of the standard infix operators are just
pre-defined symbols and may be rebound.

Although @case@ is reserved, @cases@ is not.
Similarly, although @=@ is reserved, @==@ and @=~@ are
not.  At each point, the longest possible lexeme is read.  Any kind of
"whitespace" is also a proper delimiter for lexemes.

In the remainder of the report six different kinds of 
names\index{namespaces} will be used:
@@@
var	->  varid	& (variables)
con	->  conid 	& (constructors)
tyvar	->  avarid	& (type variables)
tycon	->  aconid	& (type constructors)
tycls	->  aconid	& (type classes)
modid   ->  aconid	& (modules)
@@@
Variables and type variables are represented by identifiers beginning
with small letters, and the other four by identifiers beginning with
capitals; also, variables and constructors have infix forms, the other
four do not.  Namespaces are discussed further in Section~\ref{namespaces}.

\subsection{Numeric Literals}\index{numbers!literal syntax}
\label{lexemes-numeric}

@@@
integer		-> digit\{digit\}
float		-> integer@.@integer[@e@[@-@]integer]
@@@
There are two distinct kinds of numeric literals: integer and
floating.  A floating literal must contain digits both before and
after the decimal point; this ensures that a decimal point cannot be
mistaken for another use of the dot character.  Negative numeric
literals are discussed in Section~\ref{operators}.

\subsection{Character and String Literals}
\index{characters!literal syntax}
\index{strings!literal syntax}
\label{lexemes-char}

@@@
char    ->  \fwq (graphic_{\{\fwq | @\@\}} | space | escape_{\{@\&@\}}) \fwq
string  ->  @"@ \{graphic_{\{@"@  | @\@\}} | space | escape | gap\} @"@
escape  ->  @\@ ( charesc | ascii | integer | @o@ octit\{octit\} | @x@ hexit\{hexit\} )
charesc -> @a@ | @b@ | @f@ | @n@ | @r@ | @t@ | @v@ | @\@ | @"@ | \fwq | @&@
ascii   -> @^@cntrl | @NUL@ | @SOH@ | @STX@ | @ETX@ | @EOT@ | @ENQ@ | @ACK@ 
       | @BEL@ | @BS@ | @HT@ | @LF@ | @VT@ | @FF@ | @CR@ | @SO@ | @SI@ | @DLE@ 
       | @DC1@ | @DC2@ | @DC3@ | @DC4@ | @NAK@ | @SYN@ | @ETB@ | @CAN@ 
       | @EM@ | @SUB@ | @ESC@ | @FS@ | @GS@ | @RS@ | @US@ | @SP@ | @DEL@
cntrl   -> large | @@ | @[@ | @\@ | @]@ | @^@ | @_@
gap     ->  @\@ \{tab | space\} newline \{tab | space\} @\@
hexit   -> digit | @A@ | @B@ | @C@ | @D@ | @E@ | @F@ | @a@ | @b@ | @c@ | @d@ | @e@ | @f@
octit   -> @0@ | @1@ | @2@ | @3@ | @4@ | @5@ | @6@ | @7@
@@@

Character literals are written between acute accents, as in
\fwq@a@\fwq, and strings between double quotes, as in @"Hello"@.

Escape codes may be used in characters and strings to represent
special characters.  Note that \fwq\ may be used in a string, but
must be escaped in a character; similarly, @"@ may be used in a
character, but must be escaped in a string.  @\@ must always be
escaped.  The category "charesc" also includes portable
representations for the characters ``alert'' (@\a@), ``backspace''
(@\b@), ``form feed'' (@\f@), ``new line'' (@\n@), ``carriage return''
(@\r@), ``horizontal tab'' (@\t@), and ``vertical tab'' (@\v@).

Escape characters for the ASCII\index{ASCII} character set, including
control characters such as @\^X@, are also provided.
Numeric escapes such as @\137@ are used to designate the character
with (implementation dependent) decimal representation 137; octal
(e.g.~@\o137@) and hexadecimal (e.g.~@\x137@) representations are also
allowed.  Numeric escapes that are out-of-range of the ASCII standard
are undefined and thus non-portable.

Consistent with the ``consume longest lexeme'' rule, numeric escape
characters in strings consist of all consecutive digits and may
be of arbitrary length.  Similarly, the one ambiguous ASCII escape
code, @"\SOH"@, is parsed as a string of length 1.  The escape
character @\&@ is provided as a ``null character'' to allow strings
such as @"\137\&9"@ and @"\SO\&H"@ to be constructed (both of length
two).  Thus @"\&"@ is equivalent to @""@ and the character
\fwq@\&@\fwq\ is disallowed.  Further equivalences of characters
are defined in Section~\ref{characters}.

A string may include a ``gap''---two backslants enclosing
one newline and any number of blanks or spaces---which is ignored.
This allows one to write long strings on more than one line by writing
a backslant at the end of one line and at the start of the next.  For
example,
\bprog
@
"Here is a backslant \\ as well as \137, \
    \a numeric escape character, and \^X, a control character."
@
\eprogNoSkip

String literals are actually abbreviations for lists of characters
(see Section~\ref{lists}).

% Local Variables: 
% mode: latex
% End:
